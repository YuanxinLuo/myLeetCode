# 601. 体育馆的人流量
# SQL架构
# X 市建了一个新的体育馆，每日人流量信息被记录在这三列信息中：序号 (id)、日期 (visit_date)、 人流量 (people)。
#
# 请编写一个查询语句，找出人流量的高峰期。高峰期时，至少连续三行记录中的人流量不少于100。
#
# 例如，表 stadium：
#
# +------+------------+-----------+
# | id   | visit_date | people    |
# +------+------------+-----------+
# | 1    | 2017-01-01 | 10        |
# | 2    | 2017-01-02 | 109       |
# | 3    | 2017-01-03 | 150       |
# | 4    | 2017-01-04 | 99        |
# | 5    | 2017-01-05 | 145       |
# | 6    | 2017-01-06 | 1455      |
# | 7    | 2017-01-07 | 199       |
# | 8    | 2017-01-08 | 188       |
# +------+------------+-----------+
# 对于上面的示例数据，输出为：
#
# +------+------------+-----------+
# | id   | visit_date | people    |
# +------+------------+-----------+
# | 5    | 2017-01-05 | 145       |
# | 6    | 2017-01-06 | 1455      |
# | 7    | 2017-01-07 | 199       |
# | 8    | 2017-01-08 | 188       |
# +------+------------+-----------+
SELECT DISTINCT a.*
FROM stadium a, stadium b, stadium c
WHERE (a.people >= 100 AND b.people >= 100 AND c.people >= 100)
  AND ((a.id - b.id = 1 AND a.id - c.id = 2 AND b.id - c.id = 1) -- a,b,c
    OR (b.id - a.id = 1 AND b.id - c.id = 2 AND a.id - c.id = 1) -- b,a,c
    OR (c.id - b.id = 1 AND c.id - a.id = 2 AND b.id - a.id = 1)) -- c,b,a
ORDER BY a.id;



# 620. 有趣的电影
# SQL架构
# 某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。
#
# 作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。
#
#
#
# 例如，下表 cinema:
#
# +---------+-----------+--------------+-----------+
# |   id    | movie     |  description |  rating   |
# +---------+-----------+--------------+-----------+
# |   1     | War       |   great 3D   |   8.9     |
# |   2     | Science   |   fiction    |   8.5     |
# |   3     | irish     |   boring     |   6.2     |
# |   4     | Ice song  |   Fantacy    |   8.6     |
# |   5     | House card|   Interesting|   9.1     |
# +---------+-----------+--------------+-----------+
# 对于上面的例子，则正确的输出是为：
#
# +---------+-----------+--------------+-----------+
# |   id    | movie     |  description |  rating   |
# +---------+-----------+--------------+-----------+
# |   5     | House card|   Interesting|   9.1     |
# |   1     | War       |   great 3D   |   8.9     |
# +---------+-----------+--------------+-----------+
select id, movie, description, rating
from cinema
where description != 'boring'
  and id % 2 = 1
order by rating desc;


# 626. 换座位
# 小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。
# 其中纵列的 id 是连续递增的
# 小美想改变相邻俩学生的座位。
# 你能不能帮她写一个 SQL query 来输出小美想要的结果呢？
#
#
# 示例：
#
# +---------+---------+
# |    id   | student |
# +---------+---------+
# |    1    | Abbot   |
# |    2    | Doris   |
# |    3    | Emerson |
# |    4    | Green   |
# |    5    | Jeames  |
# +---------+---------+
# 假如数据输入的是上表，则输出结果如下：
#
# +---------+---------+
# |    id   | student |
# +---------+---------+
# |    1    | Doris   |
# |    2    | Abbot   |
# |    3    | Green   |
# |    4    | Emerson |
# |    5    | Jeames  |
# +---------+---------+
SELECT if(id % 2 = 0, id - 1, if(id = (SELECT MAX(id) FROM seat), id, id + 1)) as id, student
FROM seat
ORDER BY id;


# 627. 交换工资
# SQL架构
# 给定一个 salary 表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。
#
# 注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。
#
#     例如：
#
#     | id | name | sex | salary |
#     |----|------|-----|--------|
#     | 1  | A    | m   | 2500   |
#     | 2  | B    | f   | 1500   |
#     | 3  | C    | m   | 5500   |
#     | 4  | D    | f   | 500    |
#     运行你所编写的更新语句之后，将会得到以下表:
#
#     | id | name | sex | salary |
#     |----|------|-----|--------|
#     | 1  | A    | f   | 2500   |
#     | 2  | B    | m   | 1500   |
#     | 3  | C    | f   | 5500   |
#     | 4  | D    | m   | 500    |
update salary
set sex = case when sex = 'm' then 'f' else 'm' end;